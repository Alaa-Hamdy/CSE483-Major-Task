import cv2
import imutils
import numpy as np
import os

# load the example image from SVHN dataset
images_dir = "F:/Semester 8/Computer Vision/Project/test"
for image_file in os.listdir(images_dir):
    # read the image
    image = cv2.imread(os.path.join(images_dir, image_file))

    # pre-process the image by resizing it, converting it to grayscale,
    # and blurring it
    image = imutils.resize(image, width=100)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)

    # threshold the image using Otsu's method
    thresh = cv2.threshold(
        blurred, 0, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)[1]

    # perform a series of morphological operations to clean up the image
    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))
    morph = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)

    # find contours in the image
    cnts = cv2.findContours(morph.copy(), cv2.RETR_EXTERNAL,
                            cv2.CHAIN_APPROX_SIMPLE)
    cnts = imutils.grab_contours(cnts)

    # loop over the contours
    digits = []
    for c in cnts:
        # compute the bounding box of the contour
        (x, y, w, h) = cv2.boundingRect(c)
        # filter out small bounding boxes
        if w >= 10 and h >= 20:
            # extract the digit from the thresholded image
            roi = morph[y:y+h, x:x+w]
            # pad the digit with white pixels to make it square
            pad = int(max(w, h) * 0.5)
            roi = cv2.copyMakeBorder(
                roi, pad, pad, pad, pad, cv2.BORDER_CONSTANT, value=[255, 255, 255])
            # resize the digit to 32x32 pixels and center it
            roi = cv2.resize(roi, (127, 127), interpolation=cv2.INTER_AREA)
            (w, h) = roi.shape
            dx = max(0, 16 - w)
            dy = max(0, 16 - h)
            roi = cv2.copyMakeBorder(
                roi, dy//2, dy-dy//2, dx//2, dx-dx//2, cv2.BORDER_CONSTANT, value=[255, 255, 255])
            # add the digit to the list of digits
            digits.append(roi)

    # check if digits are found
    if digits:
        # display the extracted digits
        cv2.imshow("Digits", np.hstack(digits))
        cv2.waitKey(0)
    else:
        print("No digits found in ", image_file)
